import requests
import webbrowser
from http.server import HTTPServer, BaseHTTPRequestHandler
import urllib.parse
import json
import os
import time
from dotenv import load_dotenv

# üîê –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
load_dotenv()

CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
REDIRECT_URI = os.getenv("REDIRECT_URI")

if not CLIENT_ID or not CLIENT_SECRET or not REDIRECT_URI:
    raise ValueError("CLIENT_ID, CLIENT_SECRET –∏–ª–∏ REDIRECT_URI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")


TOKEN_FILE = "token.json"

# üåç –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def open_auth_url():
    auth_url = (
        "https://hh.ru/oauth/authorize"
        f"?response_type=code"
        f"&client_id={CLIENT_ID}"
        f"&redirect_uri={REDIRECT_URI}"
    )
    print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    webbrowser.open(auth_url)

# üåê HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–æ–¥–∞
class OAuthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        query = urllib.parse.urlparse(self.path).query
        params = urllib.parse.parse_qs(query)
        code = params.get("code", [None])[0]
        if code:
            self.server.auth_code = code
            self.send_response(200)
            self.end_headers()
            self.wfile.write("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ.")
            print(f"üîê –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω: {code}")

def get_auth_code():
    server = HTTPServer(("localhost", 8080), OAuthHandler)
    server.handle_request()
    return server.auth_code

# üîÅ –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
def exchange_code_for_token(code):
    data = {
        "grant_type": "authorization_code",
        "code": code,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "redirect_uri": REDIRECT_URI,
    }
    response = requests.post("https://hh.ru/oauth/token", data=data)
    if response.status_code == 200:
        tokens = response.json()
        tokens["timestamp"] = time.time()
        save_tokens(tokens)
        return tokens
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", response.status_code, response.text)
        return None

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
def save_tokens(tokens):
    with open(TOKEN_FILE, "w", encoding="utf-8") as f:
        json.dump(tokens, f, indent=2)

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
def load_tokens():
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

# ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def is_token_expired(tokens):
    return time.time() > tokens["timestamp"] + tokens.get("expires_in", 3600) - 60

# üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ refresh_token
def refresh_access_token(refresh_token):
    data = {
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
    }
    response = requests.post("https://hh.ru/oauth/token", data=data)
    if response.status_code == 200:
        tokens = response.json()
        tokens["timestamp"] = time.time()
        save_tokens(tokens)
        print("üîÅ Access token —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        return tokens
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", response.status_code, response.text)
        return None

# üß™ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
def test_api(access_token):
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get("https://api.hh.ru/me", headers=headers)
    if response.status_code == 200:
        user = response.json()
        print(f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.get('first_name')} {user.get('last_name')}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", response.status_code, response.text)

# ‚ñ∂Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
def main():
    tokens = load_tokens()
    if tokens:
        if is_token_expired(tokens):
            print("üîÑ Access token —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–ª—è–µ–º...")
            tokens = refresh_access_token(tokens["refresh_token"])
    else:
        open_auth_url()
        code = get_auth_code()
        tokens = exchange_code_for_token(code)

    if tokens:
        test_api(tokens["access_token"])

if __name__ == "__main__":
    main()
